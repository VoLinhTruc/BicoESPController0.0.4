<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>slider_control_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_master_id = 0
movable = 0
slider_x_value = 0

var http_header_map
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sending_json = "{"+chr(34)+"analog_pin"+chr(34)+":"+string((my_master_id).pin)+","+chr(34)+"analog_value"+chr(34)+":"+string(slider_x_value)+"}"

http_request("http://"+(my_master_id).host, "POST", http_header_map, sending_json);

alarm[0] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(movable)
{
    movable = 0;
    alarm[0] = -1;
    ds_map_destroy(http_header_map);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movable = 1;
alarm[0] = 20;

http_header_map = ds_map_create()
ds_map_add(http_header_map, "User-Agent", "BiCoESPController")
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>after_decode_json_map = ds_map_create()
received_host = async_load[? "url"]
received_json = async_load[? "result"] //actually async_load[? "result"] is content cover json 

if(received_json != ""){
    if((string_pos("analog_pin", string(received_json)) &gt; 0) &amp;&amp; (string_pos("analog_value", string(received_json)) &gt; 0))
    {
        after_decode_json_map = json_decode(received_json)          
        if( ds_map_exists(after_decode_json_map, "analog_pin") &amp;&amp; ds_map_exists(after_decode_json_map, "analog_value"))   
        {
            if (((my_master_id).pin == after_decode_json_map[? "analog_pin"]) &amp;&amp; (received_host == ("http://"+(my_master_id).host)))
            {
                instance_create((my_master_id).x-sprite_get_width(slider_node_spr)/2-sprite_get_width(ok_spr)/2, (my_master_id).y, ok_obj);
            }
        }
    }
}
else
{
    instance_create((my_master_id).x-sprite_get_width(slider_node_spr)/2-sprite_get_width(faild_spr)/2, (my_master_id).y, faild_obj);
}

ds_map_destroy(after_decode_json_map)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self()
draw_set_font(name_font)
draw_set_colour(image_blend)
draw_set_valign(fa_bottom)
draw_set_halign(fa_center)
draw_text(x, y-sprite_get_height(slider_control_spr)/2, slider_x_value)

offset_x = (my_master_id).x+sprite_get_width(slider_node_spr)/2+sprite_get_width(slider_control_spr)/2
threshold_x = offset_x + sprite_get_width(slider_bar_spr)

if(movable)
{
    if((mouse_x &gt;= offset_x) &amp;&amp; (mouse_x &lt;= threshold_x))
    {
        slider_x_value = mouse_x - offset_x;
        slider_x_value = slider_x_value*4;
    }
}


x = offset_x + slider_x_value/4
y = (my_master_id).y


//draw_self();



//x = ((my_master_id).slider_bar_id).x+sprite_get_width(slider_control_spr)/2;
//y = ((my_master_id).slider_bar_id).y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
