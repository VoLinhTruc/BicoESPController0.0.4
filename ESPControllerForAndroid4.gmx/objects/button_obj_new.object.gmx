<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>button_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_network_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 0;
image_index = 0;
color_index = round(random(11));
image_blend = make_color_rgb(global.color[color_index, 0], global.color[color_index, 1], global.color[color_index, 2]);
top_left_percent = 0.3;
distance_index0_and_index1 = 16;
top_left_x = x - sprite_get_xoffset(sprite_index) + distance_index0_and_index1;
top_left_y = y - sprite_get_yoffset(sprite_index) + distance_index0_and_index1;
bottom_right_percent_x = top_left_x + sprite_width*top_left_percent;
bottom_right_percent_y = top_left_y + sprite_height*top_left_percent;

name = get_string("Name: ", "Button");
pin = get_integer("Pin", 16);
value = 0;

sending_period = 1;
connect_delay = 3;
disconnect_delay = 2;

movable = 0;
enable_to_send = 1
hold_delay_to_movable = room_speed/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>endTcpConnect();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouseAtTopLeft(top_left_percent))
{
    if(mouse_check_button(mb_left))
    {
        movable = 1
        enable_to_send = 0;
    }    
} 
       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>endTcpConnect();
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!connected)
{
    initTcpConnect();
    alarm[0] = sending_period;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(enable_to_send)
{
    if(connected)
    {
        if(instanceEnter())
        {
            if(mouse_check_button(mb_left))
            {
                if(!mouseAtTopLeft(top_left_percent))
                {
                    image_index = 1;
                    initDataAndSend("digital", pin, 1);
                }
            }
        }
    }
}

//alarm[0] = sending_period;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="recycleBin_obj_new">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button_released(mb_left) &amp;&amp; (!connected))
{
    instance_destroy()
    effect_create_below(ef_smoke, x, y, 2, image_blend);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(connected)
{
    initDataAndSend("digital", pin, 0);
    alarm[2] = disconnect_delay;
}

movable = 0
enable_to_send = 1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//delay to connect
alarm[1] = connect_delay;

//delay to movable
alarm[3] = hold_delay_to_movable;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

draw_set_alpha(0.7)

draw_set_font(pin_num_font)
draw_set_colour(~image_blend)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)

draw_text(x, y, string(pin));

draw_set_alpha(0.85)
draw_set_font(host_font)
draw_text(x, y+45, my_server_url);

draw_set_alpha(0.85)
draw_set_font(name_font)
draw_text(x, y-40, name)

draw_set_alpha(1)

top_left_x = x - sprite_get_xoffset(sprite_index) + distance_index0_and_index1;
top_left_y = y - sprite_get_yoffset(sprite_index) + distance_index0_and_index1;
bottom_right_percent_x = top_left_x + sprite_width*top_left_percent;
bottom_right_percent_y = top_left_y + sprite_height*top_left_percent;
draw_rectangle(top_left_x, top_left_y, bottom_right_percent_x, bottom_right_percent_y, 1);

if(movable)
{
    x=mouse_x;
    y=mouse_y;
}

move_snap(32, 32);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
